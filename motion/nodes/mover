#! usr/bin/env python3

"""
    Inverse Kinematics for Baxter end effector using moveit package 
"""
import sys
import rospy
import baxter_interface
from baxter_interface import CHECK_VERSION
import moveit_commander
from geometry_msgs.msg import Pose, PoseStamped, Point
from moveit_commander.conversions import pose_to_list, list_to_pose
from std_srvs.srv import Empty, EmptyResponse
from motion.srv import GoToPose, GoToPoseResponse, GetPose, GetPoseResponse
from tf.transformations import quaternion_from_euler, euler_from_quaternion

class Mover(object):
    def __init__(self):
        self.robot = moveit_commander.RobotCommander()
        self.scene = moveit_commander.PlanningSceneInterface()
        
        # arm groups
        self.left_arm_group = moveit_commander.MoveGroupCommander("left_arm", wait_for_servers=30)
        self.right_arm_group = moveit_commander.MoveGroupCommander("right_arm", wait_for_servers=30)
        
        #Reset Service:
        rospy.Service('/reset', Empty,self.reset_callback)
        #GetPose service:
        rospy.Service('/get_pose', GetPose, self.get_pose_callback)
        #GoToPose service
        rospy.Service('/go_to_pose', GoToPose, self.go_to_pose_callback)
        rospy.wait_for_service('/go_to_pose')
        self.go_to_pose = rospy.ServiceProxy('/go_to_pose', GoToPose)


        # Enable Robot 
        print("Getting robot state... ")
        self._rs = baxter_interface.RobotEnable(CHECK_VERSION)
        self._init_state = self._rs.state().enabled
        print("Enabling robot... ")
        self._rs.enable()
        self.planning_frame_left = self.left_arm_group.get_planning_frame()  # Planning frame: world
        self.planning_frame_right = self.right_arm_group.get_planning_frame()
        # self.planning_frame_left = 'head_camera'
        # self.planning_frame_right = 'head_camera'
        
        #adding multiple walls to represent safety barrier for people
        self.add_wall()

    def wait_for_state_update(self, item_name, item_attached=False,
                              item_known=False, timeout=4):
        """ Ensures collision updates are received by waiting until changes
            are reflected in get_attached_objects() and
            get_known_object_names() lists.

            Taken from Interbotix MoveIt Tutorial's Python interface example.

            Args:
                item_name (string): name of item being added to planning scene
                item_attached (bool): whether item is already in
                                        get_attached_objects()
                item_known (bool): whether item is already in
                                        get_known_object_names()
                timeout (int): time limit if item can't be added
        """
        start = rospy.get_time()
        seconds = rospy.get_time()

        while (seconds - start < timeout) and not rospy.is_shutdown():

            attached_objects = self.scene.get_attached_objects([item_name])
            is_attached = len(attached_objects.keys()) > 0
            is_known = item_name in self.scene.get_known_object_names()

            if (item_attached == is_attached) and (item_known == is_known):
                return True

            rospy.sleep(0.1)
            seconds = rospy.get_time()

        return False

    def add_wall(self):
        wall_1_pose = PoseStamped()
        wall_1_pose.header.frame_id = self.planning_frame_right
        wall_1_pose.pose.position.x = 1
        self.scene.add_box('wall1', wall_1_pose, size=(0.1, 0.5, 2))
        while not self.wait_for_state_update('wall1', item_known=True):
            self.scene.add_box('wall1', wall_1_pose, size=(0.1, 0.5, 2))

        wall_2_pose = PoseStamped()
        wall_2_pose.header.frame_id = self.planning_frame_right
        wall_2_pose.pose.position.x = 0.8
        wall_2_pose.pose.position.y = 0.8
        ###
        angle2 = quaternion_from_euler(0,0,0.524)
        #wall_2_pose.pose.orientation.x = angle2[0]
        #wall_2_pose.pose.orientation.y = angle2[1]
        wall_2_pose.pose.orientation.z = angle2[2]
        wall_2_pose.pose.orientation.w = angle2[3]
        self.scene.add_box('wall2', wall_2_pose, size=(0.1, 0.5, 2))
        while not self.wait_for_state_update('wall2', item_known=True):
            self.scene.add_box('wall2', wall_2_pose, size=(0.1, 0.5, 2))

        wall_3_pose = PoseStamped()
        wall_3_pose.header.frame_id = self.planning_frame_right
        wall_3_pose.pose.position.x = 0.8
        wall_3_pose.pose.position.y = -0.8

        angle3 = quaternion_from_euler(0,0,-0.524)
        #wall_3_pose.pose.orientation.x = angle3[0]
        #wall_3_pose.pose.orientation.y = angle3[1]
        wall_3_pose.pose.orientation.z = angle3[2]
        wall_3_pose.pose.orientation.w = angle3[3]
        self.scene.add_box('wall3', wall_3_pose, size=(0.1, 0.5, 2))
        while not self.wait_for_state_update('wall3', item_known=True):
            self.scene.add_box('wall3', wall_3_pose, size=(0.1, 0.5, 2))

    def get_pose_callback(self, req):
        """
        Reads the current pose of the right arm gripper
        """
        right_current_pose = self.right_arm_group.get_current_pose(end_effector_link="right_gripper").pose

        angles = euler_from_quaternion([right_current_pose.orientation.x,
                                        right_current_pose.orientation.y,
                                        right_current_pose.orientation.z,
                                        right_current_pose.orientation.w])

        return GetPoseResponse(x=right_current_pose.position.x,
                               y=right_current_pose.position.y,
                               z=right_current_pose.position.z,
                               r=angles[0], p=angles[1], yaw=angles[2])

    def reset_callback(self, req):
        """
        Moves the right arm to a default home state
        """
        #Declaring the reset position and assigning coordinates
        right_target_pose = Pose()
        right_target_pose.position.x = rospy.get_param("reset.p.x")
        right_target_pose.position.y = rospy.get_param("reset.p.y")
        right_target_pose.position.z = rospy.get_param("reset.p.z")
        right_target_pose.orientation.x = rospy.get_param("reset.o.x")
        right_target_pose.orientation.y = rospy.get_param("reset.o.y")
        right_target_pose.orientation.z = rospy.get_param("reset.o.z")
        right_target_pose.orientation.w = rospy.get_param("reset.o.w")

        #set target
        self.right_arm_group.set_pose_target(right_target_pose,end_effector_link="right_gripper")
        print(right_target_pose)
        print("Setting Target")

        #Can be done for left arm too
        """
        left_current_pose = self.left_arm_group.get_current_pose(end_effector_link="left_gripper").pose
        left_target_pose = left_current_pose
        left_target_pose.position.x = 0.26371349340013645
        left_target_pose.position.y = 1.091296894035553
        left_target_pose.position.z = 0.35912424523904696
        left_target_pose.orientation.x = -0.24796782188110464
        left_target_pose.orientation.y = 0.18128140465718853
        left_target_pose.orientation.z = 0.24710610580797293
        left_target_pose.orientation.w = 0.9190144634930815
        """
                
        # Plan 
        print("Planning...")
        success, traj, _, errCode = self.right_arm_group.plan()

        # Execute 
        print("Executing...")

        if not success:
            print("Error, planning failed")
            return EmptyResponse()
        else:
            self.right_arm_group.execute(traj)
            self.right_arm_group.stop()
            print("Success!")
        
        # Clear pose targets 
        self.right_arm_group.clear_pose_targets()

        return EmptyResponse()
    
    def go_to_pose_callback(self, req):
        """
        Callback funtion for the go_to_pose service. Takes the transforms/ coordinates from the vision package and directs the arm to go to the coordinates
        Args:
        req (arm_move/GoToPoseRequest):
        
        Returns:
        - (arm_move/GoToPoseResponse): MoveItErrorCode to indicate success or failure
        """
        pose_goal = PoseStamped()
        pose_goal.header.frame_id = req.frame
        pose_goal.pose.position.x = req.x
        pose_goal.pose.position.y = req.y
        pose_goal.pose.position.z = req.z

        quat = quaternion_from_euler(req.r, req.p, req.yaw)

        pose_goal.pose.orientation.x = quat[0]
        pose_goal.pose.orientation.y = quat[1]
        pose_goal.pose.orientation.z = quat[2]
        pose_goal.pose.orientation.w = quat[3]

        self.right_arm_group.set_pose_target(pose_goal.pose)
        success, traj, _, errCode = self.right_arm_group.plan()

        # if not success:
        #     return GoToPoseResponse(err_code=err_code)
        
        self.right_arm_group.execute(traj)
        self.right_arm_group.stop()
        self.right_arm_group.clear_pose_targets()

        return GoToPoseResponse()



def main():
    moveit_commander.roscpp_initialize(sys.argv)
    rospy.init_node('moveit_mover')
    m = Mover()
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass