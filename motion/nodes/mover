#! usr/bin/env python3

"""
    Motion planning and execution for Baxter arms 

    Services:
        - '/reset'
        - '/get_pose'
        - '/go_to_pose'
        - '/go_to_pose_left'
        - '/get_joint_angles'
        - '/go_to_joint_angle'

    
"""
import sys
import numpy as np 
import rospy
import baxter_interface
from baxter_interface import CHECK_VERSION
import moveit_commander
from geometry_msgs.msg import Pose, PoseStamped, Point
from moveit_commander.conversions import pose_to_list, list_to_pose
from std_srvs.srv import Empty, EmptyResponse
from motion.srv import GoToPose, GoToPoseResponse, GetPose, GetPoseResponse
from sensor_msgs.msg import JointState

from tf.transformations import quaternion_from_euler, euler_from_quaternion

CYAN = '\033[96m'

class Mover(object):
    """
        Mover node 
        
        On startup, enables robot and puts arms in neutral pose.
        Provides service for arms to move to different poses. 

    """
    def __init__(self):
        # Moveit initialization
        self.robot = moveit_commander.RobotCommander()
        self.scene = moveit_commander.PlanningSceneInterface()
        
        # Arm groups
        self.left_arm_group = moveit_commander.MoveGroupCommander("left_arm", wait_for_servers=30)
        self.right_arm_group = moveit_commander.MoveGroupCommander("right_arm", wait_for_servers=30)
        
        # Baxter interface limb  
        self.right_arm_limb = baxter_interface.limb.Limb("right")

        # Reset Service
        rospy.Service('/reset', Empty, self.reset_callback)
        rospy.wait_for_service('/reset')
        self.reset = rospy.ServiceProxy('/reset', Empty)

        # GetPose service
        rospy.Service('/get_pose', GetPose, self.get_pose_callback)

        # GoToPose service
        rospy.Service('/go_to_pose', GoToPose, self.go_to_pose_callback)
        rospy.wait_for_service('/go_to_pose')
        self.go_to_pose = rospy.ServiceProxy('/go_to_pose', GoToPose)

        #Get_Joint_Angles Service
        rospy.Service('/get_joint_angles', Empty, self.get_joint_angles_callback)

        #Go to Joint angle service
        rospy.Service('/go_to_joint_angle',Empty, self.move_to_joint)

        #Go to Pose service for left arm
        rospy.Service('/go_to_pose_left', GoToPose, self.go_to_pose_left_callback)
        rospy.wait_for_service('/go_to_pose_left')
        self.go_to_pose_left = rospy.ServiceProxy('/go_to_pose_left', GoToPose)

        # Enable Robot 
        print("Getting robot state... ")
        self._rs = baxter_interface.RobotEnable(CHECK_VERSION)
        self._init_state = self._rs.state().enabled
        print("Enabling robot... ")
        self._rs.enable()
        self.planning_frame_left = self.left_arm_group.get_planning_frame()  # Planning frame: world
        self.planning_frame_right = self.right_arm_group.get_planning_frame()
        
        # Make right arm to go neutral position
        print(f"{CYAN}Going to neutral pose...") 
        self.reset()

        # Add cylinder around baxter head in planning scene 
        self.add_cylinder()


    def wait_for_state_update(self, item_name, item_attached=False,
                              item_known=False, timeout=4):
        """ 
            Ensures collision updates are received by waiting until changes
            are reflected in get_attached_objects() and
            get_known_object_names() lists.
            Taken from Interbotix MoveIt Tutorial's Python interface example.
            Args:
                item_name (string): name of item being added to planning scene
                item_attached (bool): whether item is already in
                                        get_attached_objects()
                item_known (bool): whether item is already in
                                        get_known_object_names()
                timeout (int): time limit if item can't be added
        """
        start = rospy.get_time()
        seconds = rospy.get_time()

        while (seconds - start < timeout) and not rospy.is_shutdown():

            attached_objects = self.scene.get_attached_objects([item_name])
            is_attached = len(attached_objects.keys()) > 0
            is_known = item_name in self.scene.get_known_object_names()

            if (item_attached == is_attached) and (item_known == is_known):
                return True

            rospy.sleep(0.1)
            seconds = rospy.get_time()

        return False

    def add_cylinder(self):
        """
            Adds a cylinder around the Baxter head to prevent arms from colliding with the screen.
        """
        cylinder_pose = PoseStamped()
        cylinder_pose.pose.position.z = 0.7
        cylinder_pose.header.frame_id = self.planning_frame_right
        self.scene.add_cylinder('cylinder', cylinder_pose, 0.3, 0.2)
        while not self.wait_for_state_update('cylinder', item_known=True):
            self.scene.add_cylinder('cylinder', cylinder_pose, .3, 0.2)

    def get_pose_callback(self, req):
        """
            Reads the current pose of the right arm gripper
        """
        right_current_pose = self.right_arm_group.get_current_pose(end_effector_link="right_gripper").pose

        angles = euler_from_quaternion([right_current_pose.orientation.x,
                                        right_current_pose.orientation.y,
                                        right_current_pose.orientation.z,
                                        right_current_pose.orientation.w])

        return GetPoseResponse(x=right_current_pose.position.x,
                               y=right_current_pose.position.y,
                               z=right_current_pose.position.z,
                               r=angles[0], p=angles[1], yaw=angles[2])

    def get_joint_angles_callback(self, req):
        """
            Reads the current joint angles and prints them
        """
        right_current_angles = self.right_arm_group.get_current_joint_values()
        print(right_current_angles)
        
        return Empty

    def cartesian_plan_execute(self,move_group,target_pose):
        """
            Plans and executes trajectory to bring arm to a target pose (for temperature reading)

            Procedure:
            1. Plans cartesian trajectory to target pose  
            2. If planner is able to plan less than 90% of the path to the target,
                go to a saved postion
                From that saved position, plan and execute movement
            3. Otherwise, execute the plan

            Args: 
                move_group (MoveGroupCommander): right or left arm move group
                target_pose (Pose)
            
            Returns:
                fraction: fraction of final trajectory planned 
    
        """
        def planning(pose):
            """
                Plans a cartesian path for a pose 
                
                Args:
                    pose (Pose)
                
                Returns:
                    plan: cartesian trajectory 
                    fraction: fraction of trajectory to target planned
            """
            plan,fraction = move_group.compute_cartesian_path(
                            [pose],
                            0.01,
                            0.0
            )
            return plan, fraction

        # Plan target pose
        plan, fraction = planning(target_pose)
        print(f"{CYAN} First Plan: {fraction} ")
        
        if fraction<0.90:
            # Person on left side
            if target_pose.position.y <0:
                print(f"Going to left saved position") #Tucked
                angles = [0.3508981052287884, -0.6312330942148477, -0.13882526130362993, 2.0447963902512565, -0.1729563338340804, -1.119805975156352, 0.10584467436409355]
                
            # Person on right side 
            else:
                print(f"Going to right saved position") #Tucked
                angles = [1.24674288535387, -0.6615292147755847, 1.0200972239438002, 0.7363107781849986, 0.8153107887610974, -1.14473316295949, 1.4143302864303515]
            
            names = self.right_arm_limb.joint_names()
            positions = dict(zip(names,angles))
            self.right_arm_limb.move_to_joint_positions(positions)

            plan, fraction = planning(target_pose)
            print(f"{CYAN}\n Second Plan:{fraction}")
            print(f"{CYAN}First attempt to target pose\n")
            self.right_arm_group.execute(plan)
            self.right_arm_group.stop()

        else:
            print(f"{CYAN}\nTrajectory Planned:{fraction}")
            print(f"{CYAN}First attempt to target pose\n")
            self.right_arm_group.execute(plan)
            self.right_arm_group.stop()
        
        self.right_arm_group.clear_pose_targets()

        return fraction

                         
    def move_to_joint(self, req):
        """
            Moves the right arm to the neutral position a
            This is used in state machine to move the right arm back to a neutral position 

            Args:
                req (EmptyRequest)
            
            Returns:
                EmptyResponse 
        """

         # Going to neutral position 
        joint_target_pose = self.right_arm_group.get_current_joint_values()
        joint_target_pose[0] =  0.0         #1.3203739631723699
        joint_target_pose[1] =  -0.55       #-0.6626797003664987
        joint_target_pose[2] =  0.0         #-0.3090971287589109
        joint_target_pose[3] =  0.75        #1.23255356306593
        joint_target_pose[4] =  0.0         #0.7485826244880819
        joint_target_pose[5] =  1.26        #-0.6312330942148477
        joint_target_pose[6] =  0.0         #2.6599226861933074
        
        self.right_arm_group.set_joint_value_target(joint_target_pose)
        success, traj, _, errCode = self.right_arm_group.plan()
        ref = self.right_arm_group.get_current_pose()
        traj = self.right_arm_group.retime_trajectory(ref,traj)
        self.right_arm_group.execute(traj)

        self.right_arm_group.clear_pose_target(end_effector_link="right_gripper")
        return EmptyResponse()

    def reset_callback(self, req):
        """
            Moves the right arm to a default home state using baxter interface 

            We use the baxter interface instead of moveit because this method is produces as quicker 
            action from the robot, and since this is only called at startup, it will not interfere with
            moveit commands used later. 

            Args:
                req (EmptyRequest)

            Returns:
                EmtpyResponse 
            
        """
        self.right_arm_limb.move_to_neutral()

        return EmptyResponse()
    
    def go_to_pose_callback(self, req):
        print(f"{CYAN} Go to pose called!")
        """
            Callback funtion for the go_to_pose service. Takes the transforms/ coordinates from the vision package and directs the arm to go to the coordinates
        
        Args:
            req (arm_move/GoToPoseRequest): Target pose information
        
        Returns:
            (arm_move/GoToPoseResponse): Bool to indicate success or failure
        """
        pose_goal = PoseStamped()
        pose_goal.header.frame_id = req.frame
        pose_goal.pose.position.x = req.x
        pose_goal.pose.position.y = req.y
        pose_goal.pose.position.z = req.z - 0.1 # 10cm lower so that thermometer is closer to face 

        quat = quaternion_from_euler(req.r, req.p, req.yaw)

        pose_goal.pose.orientation.x = quat[0]
        pose_goal.pose.orientation.y = quat[1]
        pose_goal.pose.orientation.z = quat[2] 
        pose_goal.pose.orientation.w = quat[3]

        print(f"{CYAN}x:{pose_goal.pose.position.x},y:{pose_goal.pose.position.y}")
        fraction = self.cartesian_plan_execute(self.right_arm_group,pose_goal.pose)
        
        return GoToPoseResponse(success=fraction > 0.50)

    def go_to_pose_left_callback(self, req):
        """
            Callback funtion for the go_to_pose_left service. Takes the transforms/ coordinates from the vision package and directs the arm to go to the coordinates
            Args:
                req (arm_move/GoToPoseRequest):
        
            Returns:
                (arm_move/GoToPoseResponse): Bool to indicate success or failure
        """
        print(f"{CYAN} Go to pose called!")
        
        pose_goal = PoseStamped()
        pose_goal.header.frame_id = req.frame
        pose_goal.pose.position.x = req.x
        pose_goal.pose.position.y = req.y
        pose_goal.pose.position.z = req.z

        quat = quaternion_from_euler(req.r, req.p, req.yaw)

        pose_goal.pose.orientation.x = quat[0]
        pose_goal.pose.orientation.y = quat[1]
        pose_goal.pose.orientation.z = quat[2] 
        pose_goal.pose.orientation.w = quat[3]

        print(f"{CYAN}x:{pose_goal.pose.position.x},y:{pose_goal.pose.position.y}")
        fraction = self.cartesian_plan_execute(self.left_arm_group,pose_goal.pose)

        return GoToPoseResponse(success=fraction > 0.50)


def main():
    """
        The main function
    """
    moveit_commander.roscpp_initialize(sys.argv)
    rospy.init_node('moveit_mover')
    m = Mover()
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
