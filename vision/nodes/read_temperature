#!/usr/bin/env python

"""
Node uses an image from Baxter hand camera feed to identify whether the IR thermometer has 
shown a green (safe temperature) result or red (unsafe temperature) result on the LED screen

SUBSCRIBERS:
    /cameras/right_hand_camera (sensor_msgs/Image): video feed from Baxter right hand camera
    /state (std_msgs/String): state of the overall control loop

PUBLISHERS:
    /temperature_reading (std_msgs/String): color value from thermometer (GREEN, RED, or CLEAR)

"""


import sys
import rospy
import cv2
import numpy as np

from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
from geometry_msgs.msg import Pose


class ReadTemperature:
    """ 
    Reads the color value of an LED screen and returns GREEN, RED, or CLEAR depending
    on average value within a region of interest
    """

    def __init__(self):

        # Dimensions of the capture window that gets averaged, 
        # pulled from the ROS parameter server
        self.centroidX   = rospy.get_param('/centroidX')
        self.centroidY   = rospy.get_param('/centroidY')
        self.windowSizeX = rospy.get_param('/windowSizeX')
        self.windowSizeY = rospy.get_param('/windowSizeY')
        
        # Threshold for signalling RED or GREEN 
        self.red_threshold   = 200
        self.green_threshold = 200

        # Initialize CvBridge object, which allows conversion between ROS message
        # and OpenCV Image data type
        self.bridge = CvBridge()

        # Initialize subscriber, reading a ROS Image message type from the hand camera
        self.image_sub = rospy.Subscriber('/cameras/right_hand_camera/image',
                                                 Image,
                                                 self.image_callback)

        # Initialize the state subscriber, which triggers this node 
        self.state_sub = rospy.Subscriber('/state', String, self.state_callback)

        # Initialize the temperature publisher, which publishes a string representing the
        # thermometer screen color to the /temperature_reading topic
        self.temperature_pub = rospy.Publisher('/temperature_reading', String, queue_size=10)

        # Set initial state to none
        sself.state = None


    def state_callback(self, data):
        """ Used as the 'state' callback.

            Args:
               data (std_msgs/String): the current state
        """
        self.state = data.data


    def image_callback(self, data):
        """
        Callback for image subscriber
        """
        
        # Attempt to pull frame from ROS message and convert using CvBridge
        try:
            # Pull image as an 8-bit RGB image
            self.incomingFrame = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            # Print error if incoming frame cannot be pulled
            print(e)

        # Define the capture window representing the thermometer window
        self.captureWindow =  self.incomingFrame[self.centroidY-self.windowSizeY:self.centroidY+self.windowSizeY, 
                                                 self.centroidX-self.windowSizeX:self.centroidX+self.windowSizeX]

        # Draw a rectange around the window (for visualization / debugging)
        # cv2.rectangle(self.incomingFrame, (self.centroidX-self.windowSizeX, self.centroidY-self.windowSizeY), 
        #                                   (self.centroidX+self.windowSizeX, self.centroidY+self.windowSizeY), (255, 255, 255), 1)                                                 
        
        # Calculate BGR channels averages
        self.channels = cv2.mean(self.captureWindow)

        # Reorder the channels into RGB format (for clarity / ease of reading)
        self.rgb_fix = np.array([(self.channels[2], self.channels[1], self.channels[0])])

        # Output RGB average (for debugging)
        # self.RGBstring = "R: {:03d}   G: {:03d}   B: {:03d}   ".format(int(self.channels[2]), int(self.channels[1]) , int(self.channels[0]))
        # print ( self.RGBstring  ) 

        # Check channel averages and publish if average is over the threshold
        if self.channels[1] > self.green_threshold:
            # print ( self.RGBstring , "\t GREEN DETECTED, TEMPERATURE OK!" )
            self.temperature_pub.publish("GREEN")

        elif self.channels[2] > self.red_threshold:
            # print ( self.RGBstring , "\t RED DETECTED, TEMPERATURE TOO HIGH!" )
            self.temperature_pub.publish("RED")

        else:
            # print ( self.RGBstring , "\t Waiting for reading...!" )
            self.temperature_pub.publish("CLEAR")

        # Display images on the screen (for debugging)
        # cv2.namedWindow("image", cv2.WINDOW_NORMAL)
        # cv2.imshow("image", self.incomingFrame)
        # cv2.waitKey(1)


def main(args):
    rospy.init_node('read_temperature', anonymous=True)
    read_temperature = ReadTemperature()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")
    cv2.destroyAllWindows()


if __name__ == '__main__':
    main(sys.argv)